<?php

/**
 * @file
 * Used to add field in login page.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Callback action on submit (custom method plus bas)
 *
 * @param $form
 *   This has the form data.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   This has the current state of form.
 *
 * @param $form_id
 *   This has the id of the form.
 */
function sign_in_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id == 'user_login_form') {

    // Code to modify your form input
    // $form['actions']['submit']['#submit'][] = 'custom_submit_method';.
    $form['fullName'] = [
      '#type' => 'textfield',
      '#title' => t('Full Name'),
      '#required' => TRUE,
    ];
    // $form['#validate'][] = 'sign_in_form_user_login_form_validate';
  }
}


/**
* Validation handler to login the user based on email and password.
*
* @param array $form
*   Form array containing the form fields.
* @param \Drupal\Core\Form\FormStateInterface $form_state
*   Stores the current value entered by the user.
*
* @return void
*/
// function sign_in_form_user_login_form_validate(array &$form, FormStateInterface $form_state) {
// // Fetch user by email.
// $email = $form_state->getValue('email');
// $accounts = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['mail' => $email]);
// $account = reset($accounts);
// $password = $form_state->getValue('pass');
// $is_valid_password = \Drupal::service('password')->check($password, $account->getPassword());

// // If both OTP and password verification are successful, log in the user.
// if ($account && $is_valid_password) {
//   // $account = reset($account);
//   user_login_finalize($account);
// }
// else {
//   $form_state->setErrorByName('email', t('Invalid email, or Password.'));
// }
// }
